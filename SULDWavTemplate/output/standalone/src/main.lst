1     	 0000					.public _K1
2     	 0000					.public _K2
3     	 0000					.public _coeffH
4     	 0000					.public _coeffL
5     	 0000					.public _enable
6     	 0000					.public _sampleBuffer
7     	 0000					.public _sb_ptr0
8     	 0000					.public _sb_ptr1
9     	 0000					.public _sb_ptr2
10    	 0000					.public _sb_ptr3
11    	 0000					.public _sb_ptr4
12    	 0000					.public _sb_ptr5
13    	 0000					.public _sb_ptr6
14    	 0000					.public _sb_ptr7
15    	 0000					.public _z_xH
16    	 0000					.public _z_xL
17    	 0000					.public _z_yH
18    	 0000					.public _z_yL
19    	 0000					.public _calculateShelvingCoeff
20    	 0000					.extern _cl_wavread_bits_per_sample
21    	 0000					.extern _cl_wavread_close
22    	 0000					.extern _cl_wavread_frame_rate
23    	 0000					.extern _cl_wavread_getnchannels
24    	 0000					.extern _cl_wavread_number_of_frames
25    	 0000					.extern _cl_wavread_open
26    	 0000					.extern _cl_wavread_recvsample
27    	 0000					.extern _cl_wavwrite_close
28    	 0000					.extern _cl_wavwrite_open
29    	 0000					.extern _cl_wavwrite_sendsample
30    	 0000					.public _clip
31    	 0000					.public _first_order_IIR
32    	 0000					.public _main
33    	 0000					.extern _printf
34    	 0000					.public _processing
35    	 0000					.public _shelvingHP
36    	 0000					.public _shelvingLP
37    	 0000					.extern _strcmp
38    	 0000					.extern _strcpy
39    	 0000					.extern __div
40    							.xdata_ovly
40     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
41    	 0000				_Fch
42    	 0000					.bss (0x1)
43    							.xdata_ovly
43     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
44    	 0000				_Fcl
45    	 0000					.bss (0x1)
46    							.xdata_ovly
46     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
47    	 0000				_K1
48    	 0000					.dw  (0x0)
	 0000	 00000000	 
49    							.xdata_ovly
49     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
50    	 0000				_K2
51    	 0000					.dw  (0x0)
	 0000	 00000000	 
52    							.xdata_ovly
52     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
53    	 0000				_alpha1
54    	 0000					.dw  (0x0)
	 0000	 00000000	 
55    							.xdata_ovly
55     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
56    	 0000				_alpha2
57    	 0000					.dw  (0x0)
	 0000	 00000000	 
58    							.xdata_ovly align 4
58     >> start of macro: .xdata_ovly align
1+    									seg_align , "X_OVLY", X, 4
1+     >> start of macro: seg_align
1+    						    SEGMENT "X_OVLY" ALIGN( 4 )
2+    						  .if "" != ""
3+    						___SegStart_X_
4+    						  .endif
5+    							#RememberSegmentType
6+     >> end of macro: seg_align
2+     >> end of macro: .xdata_ovly align
59    	 0000				_coeffH
60    	 0000					.dw  (0x0)
	 0000	 00000000	 
61    	 0001					.dw  (0x0)
	 0001	 00000000	 
62    	 0002					.dw  (0x0)
	 0002	 00000000	 
63    	 0003					.dw  (0x0)
	 0003	 00000000	 
64    							.xdata_ovly align 4
64     >> start of macro: .xdata_ovly align
1+    									seg_align , "X_OVLY", X, 4
1+     >> start of macro: seg_align
1+    						    SEGMENT "X_OVLY" ALIGN( 4 )
2+    						  .if "" != ""
3+    						___SegStart_X_
4+    						  .endif
5+    							#RememberSegmentType
6+     >> end of macro: seg_align
2+     >> end of macro: .xdata_ovly align
65    	 0000				_coeffL
66    	 0000					.dw  (0x0)
	 0000	 00000000	 
67    	 0001					.dw  (0x0)
	 0001	 00000000	 
68    	 0002					.dw  (0x0)
	 0002	 00000000	 
69    	 0003					.dw  (0x0)
	 0003	 00000000	 
70    							.xdata_ovly
70     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
71    	 0000				_enable
72    	 0000					.dw  (0x1)
	 0000	 00000001	 
73    							.xdata_ovly
73     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
74    	 0000				_main_h
75    	 0000					.bss (0x1)
76    							.xdata_ovly
76     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
77    	 0000				_main_nChannels
78    	 0000					.bss (0x1)
79    							.ydata_ovly
79     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
80    	 0000				_sampleBuffer
81    	 0000					.bss (0x80)
82    							.xdata_ovly
82     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
83    	 0000				_sb_ptr0
84    	 0000					.bss (0x1)
85    							.xdata_ovly
85     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
86    	 0000				_sb_ptr1
87    	 0000					.dw _sampleBuffer+16
	 0000	 00000010	 
88    							.xdata_ovly
88     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
89    	 0000				_sb_ptr2
90    	 0000					.dw _sampleBuffer+32
	 0000	 00000020	 
91    							.xdata_ovly
91     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
92    	 0000				_sb_ptr3
93    	 0000					.dw _sampleBuffer+48
	 0000	 00000030	 
94    							.xdata_ovly
94     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
95    	 0000				_sb_ptr4
96    	 0000					.dw _sampleBuffer+64
	 0000	 00000040	 
97    							.xdata_ovly
97     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
98    	 0000				_sb_ptr5
99    	 0000					.dw _sampleBuffer+80
	 0000	 00000050	 
100   							.xdata_ovly
100    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
101   	 0000				_sb_ptr6
102   	 0000					.dw _sampleBuffer+96
	 0000	 00000060	 
103   							.xdata_ovly
103    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
104   	 0000				_sb_ptr7
105   	 0000					.dw _sampleBuffer+112
	 0000	 00000070	 
106   							.xdata_ovly
106    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
107   	 0000				_string_const_0
108   	 0000					.dw  (0x30)
	 0000	 00000030	 
109   	 0001					.dw  (0x0)
	 0001	 00000000	 
110   							.xdata_ovly
110    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
111   	 0000				_string_const_1
112   	 0000					.dw  (0x45)
	 0000	 00000045	 
113   	 0001					.dw  (0x72)
	 0001	 00000072	 
114   	 0002					.dw  (0x72)
	 0002	 00000072	 
115   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
116   	 0004					.dw  (0x72)
	 0004	 00000072	 
117   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
118   	 0006					.dw  (0x20)
	 0006	 00000020	 
119   	 0007					.dw  (0x43)
	 0007	 00000043	 
120   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
121   	 0009					.dw  (0x75)
	 0009	 00000075	 
122   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
123   	 000B					.dw  (0x64)
	 000B	 00000064	 
124   	 000C					.dw  (0x20)
	 000C	 00000020	 
125   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
126   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
127   	 000F					.dw  (0x74)
	 000F	 00000074	 
128   	 0010					.dw  (0x20)
	 0010	 00000020	 
129   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
130   	 0012					.dw  (0x70)
	 0012	 00000070	 
131   	 0013					.dw  (0x65)
	 0013	 00000065	 
132   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
133   	 0015					.dw  (0x20)
	 0015	 00000020	 
134   	 0016					.dw  (0x77)
	 0016	 00000077	 
135   	 0017					.dw  (0x61)
	 0017	 00000061	 
136   	 0018					.dw  (0x76)
	 0018	 00000076	 
137   	 0019					.dw  (0x65)
	 0019	 00000065	 
138   	 001A					.dw  (0x66)
	 001A	 00000066	 
139   	 001B					.dw  (0x69)
	 001B	 00000069	 
140   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
141   	 001D					.dw  (0x65)
	 001D	 00000065	 
142   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
143   	 001F					.dw  (0xa)
	 001F	 0000000A	 
144   	 0020					.dw  (0x0)
	 0020	 00000000	 
145   							.xdata_ovly
145    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
146   	 0000				_string_const_2
147   	 0000					.dw  (0x45)
	 0000	 00000045	 
148   	 0001					.dw  (0x72)
	 0001	 00000072	 
149   	 0002					.dw  (0x72)
	 0002	 00000072	 
150   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
151   	 0004					.dw  (0x72)
	 0004	 00000072	 
152   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
153   	 0006					.dw  (0x20)
	 0006	 00000020	 
154   	 0007					.dw  (0x43)
	 0007	 00000043	 
155   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
156   	 0009					.dw  (0x75)
	 0009	 00000075	 
157   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
158   	 000B					.dw  (0x64)
	 000B	 00000064	 
159   	 000C					.dw  (0x20)
	 000C	 00000020	 
160   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
161   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
162   	 000F					.dw  (0x74)
	 000F	 00000074	 
163   	 0010					.dw  (0x20)
	 0010	 00000020	 
164   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
165   	 0012					.dw  (0x70)
	 0012	 00000070	 
166   	 0013					.dw  (0x65)
	 0013	 00000065	 
167   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
168   	 0015					.dw  (0x20)
	 0015	 00000020	 
169   	 0016					.dw  (0x77)
	 0016	 00000077	 
170   	 0017					.dw  (0x61)
	 0017	 00000061	 
171   	 0018					.dw  (0x76)
	 0018	 00000076	 
172   	 0019					.dw  (0x65)
	 0019	 00000065	 
173   	 001A					.dw  (0x66)
	 001A	 00000066	 
174   	 001B					.dw  (0x69)
	 001B	 00000069	 
175   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
176   	 001D					.dw  (0x65)
	 001D	 00000065	 
177   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
178   	 001F					.dw  (0xa)
	 001F	 0000000A	 
179   	 0020					.dw  (0x0)
	 0020	 00000000	 
180   							.xdata_ovly
180    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
181   	 0000				_test_n
182   	 0000					.dw  (0x80000000)
	 0000	 80000000	 
183   							.xdata_ovly
183    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
184   	 0000				_test_p
185   	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
186   							.xdata_ovly
186    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
187   	 0000				_z_xH
188   	 0000					.bss (0x10)
189   							.xdata_ovly
189    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
190   	 0000				_z_xL
191   	 0000					.bss (0x10)
192   							.xdata_ovly
192    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
193   	 0000				_z_yH
194   	 0000					.bss (0x10)
195   							.xdata_ovly
195    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
196   	 0000				_z_yL
197   	 0000					.bss (0x10)
198   							.code_ovly
198    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
199   						
200   						
201   						
202   	 0000				_calculateShelvingCoeff:			/* LN: 117 | CYCLE: 0 | RULES: () */ 
203   	 0000	 BB540007		xmem[i7] = i7			# LN: 117 | 
204   	 0001	 020F7FFF		i7 += 1			# LN: 117 | 
205   	 0002	 87750004		i7 = i7 + (0x4)			# LN: 117 | 
206   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 117 | 
207   	 0004	 98540001		xmem[i1] = a0h			# LN: 117 | 
208   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 117 | 
209   	 0006	 B0540001		xmem[i1] = i0			# LN: 117 | 
210   	 0007				cline_117_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
211   	 0007	 90750001		i0 = i7 - (0x1)			# LN: 121 | 
212   	 0008	 88140000		a0 = xmem[i0]			# LN: 121 | 
213   	 0009	 90750003		i0 = i7 - (0x3)			# LN: 121 | 
214   	 000A	 98540000		xmem[i0] = a0h			# LN: 121 | 
215   	 000B				cline_121_0:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
216   	 000B	 90750003		i0 = i7 - (0x3)			# LN: 122 | 
217   	 000C	 8088002D		call (_clip)			# LN: 122 | 
218   	 000D				cline_122_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
219   	 000D	 90750001		i0 = i7 - (0x1)			# LN: 124 | 
220   	 000E	 88140000		a0 = xmem[i0]			# LN: 124 | 
221   	 000F	 00004C80		a0 =- a0			# LN: 124 | 
222   	 0010	 90750004		i0 = i7 - (0x4)			# LN: 124 | 
223   	 0011	 98540000		xmem[i0] = a0h			# LN: 124 | 
224   	 0012				cline_124_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
225   	 0012	 90750004		i0 = i7 - (0x4)			# LN: 125 | 
226   	 0013	 8088002D		call (_clip)			# LN: 125 | 
227   	 0014				cline_125_0:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
228   	 0014	 90750003		i0 = i7 - (0x3)			# LN: 127 | 
229   	 0015	 91750002		i1 = i7 - (0x2)			# LN: 127 | 
230   	 0016	 B1140001		i1 = xmem[i1]			# LN: 127 | 
231   	 0017	 88140000		a0 = xmem[i0]			# LN: 127 | 
232   	 0018	 98540001		xmem[i1] = a0h			# LN: 127 | 
233   	 0019				cline_127_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
234   	 0019	 90750002		i0 = i7 - (0x2)			# LN: 129 | 
235   	 001A	 B0140000		i0 = xmem[i0]			# LN: 129 | 
236   	 001B	 88040000		a0 = xmem[_test_n + 0]			# LN: 129 | 
237   	 001C	 02087FFF		i0 += 1			# LN: 129 | 
238   	 001D	 98540000		xmem[i0] = a0h			# LN: 129 | 
239   	 001E				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
240   	 001E	 90750002		i0 = i7 - (0x2)			# LN: 130 | 
241   	 001F	 B0140000		i0 = xmem[i0]			# LN: 130 | 
242   	 0020	 88040000		a0 = xmem[_test_p + 0]			# LN: 130 | 
243   	 0021	 02287FFF		i0 += 2			# LN: 130 | 
244   	 0022	 98540000		xmem[i0] = a0h			# LN: 130 | 
245   	 0023				cline_130_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
246   	 0023	 90750002		i0 = i7 - (0x2)			# LN: 131 | 
247   	 0024	 B0140000		i0 = xmem[i0]			# LN: 131 | 
248   	 0025	 91750004		i1 = i7 - (0x4)			# LN: 131 | 
249   	 0026	 80050003		i0 = i0 + (0x3)			# LN: 131 | 
250   	 0027	 88140001		a0 = xmem[i1]			# LN: 131 | 
251   	 0028	 98540000		xmem[i0] = a0h			# LN: 131 | 
252   	 0029				cline_131_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
253   	 0029	 8008002A		jmp (__epilogue_246)			# LN: 133 | 
254   	 002A				__epilogue_246:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
255   	 002A	 97750004		i7 = i7 - (0x4)			# LN: 133 | 
256   	 002B	 02177FFF		i7 -= 1			# LN: 133 | 
257   	 002C	 81880000		ret			# LN: 133 | 
258   						
259   						
260   						
261   	 002D				_clip:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
262   	 002D	 BB540007		xmem[i7] = i7			# LN: 45 | 
263   	 002E	 020F7FFF		i7 += 1			# LN: 45 | 
264   	 002F	 87750001		i7 = i7 + (0x1)			# LN: 45 | 
265   	 0030	 91750001		i1 = i7 - (0x1)			# LN: 45 | 
266   	 0031	 B0540001		xmem[i1] = i0			# LN: 45 | 
267   	 0032				cline_45_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
268   	 0032	 90750001		i0 = i7 - (0x1)			# LN: 47 | 
269   	 0033	 B0140000		i0 = xmem[i0]			# LN: 47 | 
270   	 0034	 88040000		a0 = xmem[_test_p + 0]			# LN: 47 | 
271   	 0035	 89140010		a1 = xmem[i0]; i0 += 1			# LN: 47, 47 | 
272   	 0036	 91140000		a1l = xmem[i0]			# LN: 47 | 
273   	 0037	 000044C0		a0 = a1 - a0			# LN: 47 | 
274   	 0038	 8508003F		if (a <= 0) jmp (else_0)			# LN: 47 | 
275   	 0039				cline_47_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
276   	 0039	 90750001		i0 = i7 - (0x1)			# LN: 49 | 
277   	 003A	 B0140000		i0 = xmem[i0]			# LN: 49 | 
278   	 003B	 88040000		a0 = xmem[_test_p + 0]			# LN: 49 | 
279   	 003C	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 49, 49 | 
280   	 003D	 90540000		xmem[i0] = a0l			# LN: 49 | 
281   	 003E	 8008004C		jmp (endif_0)			# LN: 49 | 
282   	 003F				cline_49_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
283   	 003F				else_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
284   	 003F	 90750001		i0 = i7 - (0x1)			# LN: 52 | 
285   	 0040	 B0140000		i0 = xmem[i0]			# LN: 52 | 
286   	 0041	 88040000		a0 = xmem[_test_n + 0]			# LN: 52 | 
287   	 0042	 89140010		a1 = xmem[i0]; i0 += 1			# LN: 52, 52 | 
288   	 0043	 91140000		a1l = xmem[i0]			# LN: 52 | 
289   	 0044	 000044C0		a0 = a1 - a0			# LN: 52 | 
290   	 0045	 84C8004C		if (a >= 0) jmp (else_1)			# LN: 52 | 
291   	 0046				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
292   	 0046	 90750001		i0 = i7 - (0x1)			# LN: 53 | 
293   	 0047	 B0140000		i0 = xmem[i0]			# LN: 53 | 
294   	 0048	 88040000		a0 = xmem[_test_n + 0]			# LN: 53 | 
295   	 0049	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 53, 53 | 
296   	 004A	 90540000		xmem[i0] = a0l			# LN: 53 | 
297   	 004B	 8008004C		jmp (endif_1)			# LN: 53 | 
298   	 004C				cline_53_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
299   	 004C				endif_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
300   	 004C				endif_1:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
301   	 004C				else_1:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
302   	 004C	 8008004D		jmp (__epilogue_238)			# LN: 56 | 
303   	 004D				__epilogue_238:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
304   	 004D	 97750001		i7 = i7 - (0x1)			# LN: 56 | 
305   	 004E	 02177FFF		i7 -= 1			# LN: 56 | 
306   	 004F	 81880000		ret			# LN: 56 | 
307   						
308   						
309   						
310   	 0050				_first_order_IIR:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
311   	 0050	 BB540007		xmem[i7] = i7			# LN: 57 | 
312   	 0051	 020F7FFF		i7 += 1			# LN: 57 | 
313   	 0052	 87750006		i7 = i7 + (0x6)			# LN: 57 | 
314   	 0053	 95750001		i5 = i7 - (0x1)			# LN: 57 | 
315   	 0054	 98540005		xmem[i5] = a0h			# LN: 57 | 
316   	 0055	 95750002		i5 = i7 - (0x2)			# LN: 57 | 
317   	 0056	 B0540005		xmem[i5] = i0			# LN: 57 | 
318   	 0057	 90750003		i0 = i7 - (0x3)			# LN: 57 | 
319   	 0058	 B1540000		xmem[i0] = i1			# LN: 57 | 
320   	 0059	 90750004		i0 = i7 - (0x4)			# LN: 57 | 
321   	 005A	 B8540000		xmem[i0] = i4			# LN: 57 | 
322   	 005B				cline_57_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
323   	 005B	 90750001		i0 = i7 - (0x1)			# LN: 61 | 
324   	 005C	 91750003		i1 = i7 - (0x3)			# LN: 61 | 
325   	 005D	 B1140001		i1 = xmem[i1]			# LN: 61 | 
326   	 005E	 88140000		a0 = xmem[i0]			# LN: 61 | 
327   	 005F	 98540001		xmem[i1] = a0h			# LN: 61 | 
328   	 0060				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
329   	 0060	 90750002		i0 = i7 - (0x2)			# LN: 62 | 
330   	 0061	 B0140000		i0 = xmem[i0]			# LN: 62 | 
331   	 0062	 91750003		i1 = i7 - (0x3)			# LN: 62 | 
332   	 0063	 B1140001		i1 = xmem[i1]			# LN: 62 | 
333   	 0064	 80140000		x0 = xmem[i0]			# LN: 62 | 
334   	 0065	 81140001		x1 = xmem[i1]			# LN: 62 | 
335   	 0066	 00002080		a0 = x0 * x1			# LN: 62 | 
336   	 0067	 88590408		a0 = long(a0)			# LN: 62 | 
337   	 0068	 90750006		i0 = i7 - (0x6)			# LN: 62 | 
338   	 0069	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 62, 62 | 
339   	 006A	 90540000		xmem[i0] = a0l			# LN: 62 | 
340   	 006B				cline_62_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
341   	 006B	 90750002		i0 = i7 - (0x2)			# LN: 65 | 
342   	 006C	 B0140000		i0 = xmem[i0]			# LN: 65 | 
343   	 006D	 91750003		i1 = i7 - (0x3)			# LN: 65 | 
344   	 006E	 02087FFF		i0 += 1			# LN: 65 | 
345   	 006F	 B1140001		i1 = xmem[i1]			# LN: 65 | 
346   	 0070	 80140000		x0 = xmem[i0]			# LN: 65 | 
347   	 0071	 02097FFF		i1 += 1			# LN: 65 | 
348   	 0072	 90750006		i0 = i7 - (0x6)			# LN: 65 | 
349   	 0073	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 65, 65 | 
350   	 0074	 90140000		a0l = xmem[i0]			# LN: 65 | 
351   	 0075	 81140001		x1 = xmem[i1]			# LN: 65 | 
352   	 0076	 00002088		a0 += x0 * x1			# LN: 65 | 
353   	 0077	 90750006		i0 = i7 - (0x6)			# LN: 65 | 
354   	 0078	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 65, 65 | 
355   	 0079	 90540000		xmem[i0] = a0l			# LN: 65 | 
356   	 007A				cline_65_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
357   	 007A	 90750002		i0 = i7 - (0x2)			# LN: 68 | 
358   	 007B	 B0140000		i0 = xmem[i0]			# LN: 68 | 
359   	 007C	 91750004		i1 = i7 - (0x4)			# LN: 68 | 
360   	 007D	 80050003		i0 = i0 + (0x3)			# LN: 68 | 
361   	 007E	 B1140001		i1 = xmem[i1]			# LN: 68 | 
362   	 007F	 80140000		x0 = xmem[i0]			# LN: 68 | 
363   	 0080	 02097FFF		i1 += 1			# LN: 68 | 
364   	 0081	 90750006		i0 = i7 - (0x6)			# LN: 68 | 
365   	 0082	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 68, 68 | 
366   	 0083	 90140000		a0l = xmem[i0]			# LN: 68 | 
367   	 0084	 81140001		x1 = xmem[i1]			# LN: 68 | 
368   	 0085	 00002098		a0 -= x0 * x1			# LN: 68 | 
369   	 0086	 90750006		i0 = i7 - (0x6)			# LN: 68 | 
370   	 0087	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 68, 68 | 
371   	 0088	 90540000		xmem[i0] = a0l			# LN: 68 | 
372   	 0089				cline_68_0:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
373   	 0089	 90750006		i0 = i7 - (0x6)			# LN: 70 | 
374   	 008A	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 70, 70 | 
375   	 008B	 91750004		i1 = i7 - (0x4)			# LN: 70 | 
376   	 008C	 B1140001		i1 = xmem[i1]			# LN: 70 | 
377   	 008D	 90140000		a0l = xmem[i0]			# LN: 70 | 
378   	 008E	 88540001		xmem[i1] = a0			# LN: 70 | 
379   	 008F				cline_70_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
380   	 008F	 90750004		i0 = i7 - (0x4)			# LN: 74 | 
381   	 0090	 B0140000		i0 = xmem[i0]			# LN: 74 | 
382   	 0091	 91750004		i1 = i7 - (0x4)			# LN: 74 | 
383   	 0092	 B1140001		i1 = xmem[i1]			# LN: 74 | 
384   	 0093	 02087FFF		i0 += 1			# LN: 74 | 
385   	 0094	 88140001		a0 = xmem[i1]			# LN: 74 | 
386   	 0095	 98540000		xmem[i0] = a0h			# LN: 74 | 
387   	 0096				cline_74_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
388   	 0096	 90750003		i0 = i7 - (0x3)			# LN: 75 | 
389   	 0097	 B0140000		i0 = xmem[i0]			# LN: 75 | 
390   	 0098	 91750003		i1 = i7 - (0x3)			# LN: 75 | 
391   	 0099	 B1140001		i1 = xmem[i1]			# LN: 75 | 
392   	 009A	 02087FFF		i0 += 1			# LN: 75 | 
393   	 009B	 88140001		a0 = xmem[i1]			# LN: 75 | 
394   	 009C	 98540000		xmem[i0] = a0h			# LN: 75 | 
395   	 009D				cline_75_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
396   	 009D	 90750006		i0 = i7 - (0x6)			# LN: 77 | 
397   	 009E	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 77, 77 | 
398   	 009F	 90140000		a0l = xmem[i0]			# LN: 77 | 
399   	 00A0	 48487FFF		a0 = a0			# LN: 77 | 
400   	 00A1	 800800A2		jmp (__epilogue_240)			# LN: 77 | 
401   	 00A2				cline_77_0:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
402   	 00A2				__epilogue_240:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
403   	 00A2	 97750006		i7 = i7 - (0x6)			# LN: 78 | 
404   	 00A3	 02177FFF		i7 -= 1			# LN: 78 | 
405   	 00A4	 81880000		ret			# LN: 78 | 
406   						
407   						
408   						
409   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
410   							.if defined(_OVLY_)
411   								.if .strcmp('standalone',_OVLY_)=0
412   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
413   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
414   	 0000				dummy		.equ(__start)
415   								.else
416   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
417   						dummy		.equ(__intvec)
418   								.endif
419   								.endif
420   							.endif
421   						
422   	 00A5				_main:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
423   	 00A5	 BB540007		xmem[i7] = i7			# LN: 183 | 
424   	 00A6	 020F7FFF		i7 += 1			# LN: 183 | 
425   	 00A7	 8775020B		i7 = i7 + (0x20b)			# LN: 183 | 
426   	 00A8	 91750001		i1 = i7 - (0x1)			# LN: 183 | 
427   	 00A9	 98540001		xmem[i1] = a0h			# LN: 183 | 
428   	 00AA	 91750002		i1 = i7 - (0x2)			# LN: 183 | 
429   	 00AB	 B0540001		xmem[i1] = i0			# LN: 183 | 
430   	 00AC				cline_183_0:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
431   	 00AC	 90750003		i0 = i7 - (0x3)			# LN: 198 | 
432   	 00AD	 00004DC0		a0 = 0			# LN: 198 | 
433   	 00AE	 98540000		xmem[i0] = a0h			# LN: 198 | 
434   	 00AF	 80800107		do (0x8), label_end_94			# LN: 198 | 
435   	 00B0				cline_198_0:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
436   	 00B0				label_begin_94:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
437   	 00B0	 90750003		i0 = i7 - (0x3)			# LN: 199 | 
438   	 00B1	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 199, 199 | 
439   	 00B2	 00004E00		a0 = a0 << 1			# LN: 199 | 
440   	 00B3	 48707FFF		i0 = a0			# LN: 199 | 
441   	 00B4	 00007FFF		nop #empty cycle
442   	 00B5	 80050000		i0 = i0 + (_z_xH + 0)			# LN: 199 | 
443   	 00B6	 99540000		xmem[i0] = a1h			# LN: 199 | 
444   	 00B7				cline_199_0:			/* LN: 200 | CYCLE: 0 | RULES: () */ 
445   	 00B7	 90750003		i0 = i7 - (0x3)			# LN: 200 | 
446   	 00B8	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 200, 200 | 
447   	 00B9	 00004E00		a0 = a0 << 1			# LN: 200 | 
448   	 00BA	 48707FFF		i0 = a0			# LN: 200 | 
449   	 00BB	 00007FFF		nop #empty cycle
450   	 00BC	 80050000		i0 = i0 + (_z_xH + 0)			# LN: 200 | 
451   	 00BD	 02087FFF		i0 += 1			# LN: 200 | 
452   	 00BE	 99540000		xmem[i0] = a1h			# LN: 200 | 
453   	 00BF				cline_200_0:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
454   	 00BF	 90750003		i0 = i7 - (0x3)			# LN: 202 | 
455   	 00C0	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 202, 202 | 
456   	 00C1	 00004E00		a0 = a0 << 1			# LN: 202 | 
457   	 00C2	 48707FFF		i0 = a0			# LN: 202 | 
458   	 00C3	 00007FFF		nop #empty cycle
459   	 00C4	 80050000		i0 = i0 + (_z_yH + 0)			# LN: 202 | 
460   	 00C5	 99540000		xmem[i0] = a1h			# LN: 202 | 
461   	 00C6				cline_202_0:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
462   	 00C6	 90750003		i0 = i7 - (0x3)			# LN: 203 | 
463   	 00C7	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 203, 203 | 
464   	 00C8	 00004E00		a0 = a0 << 1			# LN: 203 | 
465   	 00C9	 48707FFF		i0 = a0			# LN: 203 | 
466   	 00CA	 00007FFF		nop #empty cycle
467   	 00CB	 80050000		i0 = i0 + (_z_yH + 0)			# LN: 203 | 
468   	 00CC	 02087FFF		i0 += 1			# LN: 203 | 
469   	 00CD	 99540000		xmem[i0] = a1h			# LN: 203 | 
470   	 00CE				cline_203_0:			/* LN: 206 | CYCLE: 0 | RULES: () */ 
471   	 00CE	 90750003		i0 = i7 - (0x3)			# LN: 206 | 
472   	 00CF	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 206, 206 | 
473   	 00D0	 00004E00		a0 = a0 << 1			# LN: 206 | 
474   	 00D1	 48707FFF		i0 = a0			# LN: 206 | 
475   	 00D2	 00007FFF		nop #empty cycle
476   	 00D3	 80050000		i0 = i0 + (_z_xL + 0)			# LN: 206 | 
477   	 00D4	 99540000		xmem[i0] = a1h			# LN: 206 | 
478   	 00D5				cline_206_0:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
479   	 00D5	 90750003		i0 = i7 - (0x3)			# LN: 207 | 
480   	 00D6	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 207, 207 | 
481   	 00D7	 00004E00		a0 = a0 << 1			# LN: 207 | 
482   	 00D8	 48707FFF		i0 = a0			# LN: 207 | 
483   	 00D9	 00007FFF		nop #empty cycle
484   	 00DA	 80050000		i0 = i0 + (_z_xL + 0)			# LN: 207 | 
485   	 00DB	 02087FFF		i0 += 1			# LN: 207 | 
486   	 00DC	 99540000		xmem[i0] = a1h			# LN: 207 | 
487   	 00DD				cline_207_0:			/* LN: 209 | CYCLE: 0 | RULES: () */ 
488   	 00DD	 90750003		i0 = i7 - (0x3)			# LN: 209 | 
489   	 00DE	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 209, 209 | 
490   	 00DF	 00004E00		a0 = a0 << 1			# LN: 209 | 
491   	 00E0	 48707FFF		i0 = a0			# LN: 209 | 
492   	 00E1	 00007FFF		nop #empty cycle
493   	 00E2	 80050000		i0 = i0 + (_z_yL + 0)			# LN: 209 | 
494   	 00E3	 99540000		xmem[i0] = a1h			# LN: 209 | 
495   	 00E4				cline_209_0:			/* LN: 210 | CYCLE: 0 | RULES: () */ 
496   	 00E4	 90750003		i0 = i7 - (0x3)			# LN: 210 | 
497   	 00E5	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 210, 210 | 
498   	 00E6	 00004E00		a0 = a0 << 1			# LN: 210 | 
499   	 00E7	 48707FFF		i0 = a0			# LN: 210 | 
500   	 00E8	 00007FFF		nop #empty cycle
501   	 00E9	 80050000		i0 = i0 + (_z_yL + 0)			# LN: 210 | 
502   	 00EA	 02087FFF		i0 += 1			# LN: 210 | 
503   	 00EB	 99540000		xmem[i0] = a1h			# LN: 210 | 
504   	 00EC				cline_210_0:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
505   	 00EC	 90750004		i0 = i7 - (0x4)			# LN: 215 | 
506   	 00ED	 00004DC0		a0 = 0			# LN: 215 | 
507   	 00EE	 98540000		xmem[i0] = a0h			# LN: 215 | 
508   	 00EF	 81000101		do (0x10), label_end_93			# LN: 215 | 
509   	 00F0				cline_215_0:			/* LN: 217 | CYCLE: 0 | RULES: () */ 
510   	 00F0				label_begin_93:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
511   	 00F0	 90750003		i0 = i7 - (0x3)			# LN: 217 | 
512   	 00F1	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 217, 217 | 
513   	 00F2	 00004EC0		a0 = a0 << 4			# LN: 217 | 
514   	 00F3	 48707FFF		i0 = a0			# LN: 217 | 
515   	 00F4	 91750004		i1 = i7 - (0x4)			# LN: 217 | 
516   	 00F5	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 217 | 
517   	 00F6	 88140001		a0 = xmem[i1]			# LN: 217 | 
518   	 00F7	 0C707FFF		b0 = i0			# LN: 217 | 
519   	 00F8	 00004420		a0 = a0 + b0			# LN: 217 | 
520   	 00F9	 98090030		AnyReg(i0, a0h)			# LN: 217 | 
521   	 00FA	 00007FFF		nop #empty cycle
522   	 00FB	 99D40000		ymem[i0] = a1h			# LN: 217 | 
523   	 00FC				cline_217_0:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
524   	 00FC				init_latch_label_1:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
525   	 00FC	 90750004		i0 = i7 - (0x4)			# LN: 215 | 
526   	 00FD	 88140000		a0 = xmem[i0]			# LN: 215 | 
527   	 00FE	 894A0001		uhalfword(a1) = (0x1)			# LN: 215 | 
528   	 00FF	 00004408		a0 = a0 + a1			# LN: 215 | 
529   	 0100	 90750004		i0 = i7 - (0x4)			# LN: 215 | 
530   	 0101				label_end_93:			# LN: 215 | CYCLE: 5 | RULES: ()
531   	 0101	 98540000		xmem[i0] = a0h			# LN: 215 | 
532   	 0102				cline_215_1:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
533   	 0102				init_latch_label_2:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
534   	 0102				for_end_2:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
535   	 0102	 90750003		i0 = i7 - (0x3)			# LN: 198 | 
536   	 0103	 88140000		a0 = xmem[i0]			# LN: 198 | 
537   	 0104	 894A0001		uhalfword(a1) = (0x1)			# LN: 198 | 
538   	 0105	 00004408		a0 = a0 + a1			# LN: 198 | 
539   	 0106	 90750003		i0 = i7 - (0x3)			# LN: 198 | 
540   	 0107				label_end_94:			# LN: 198 | CYCLE: 5 | RULES: ()
541   	 0107	 98540000		xmem[i0] = a0h			# LN: 198 | 
542   	 0108				cline_198_1:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
543   	 0108				for_end_1:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
544   	 0108	 90750002		i0 = i7 - (0x2)			# LN: 223 | 
545   	 0109	 B0140000		i0 = xmem[i0]			# LN: 223 | 
546   	 010A	 A1050000		i1 = (0) + (_string_const_0)			# LN: 223 | 
547   	 010B	 02287FFF		i0 += 2			# LN: 223 | 
548   	 010C	 B0140000		i0 = xmem[i0]			# LN: 223 | 
549   	 010D	 80880000		call (_strcmp)			# LN: 223 | 
550   	 010E	 00004E80		a0 & a0			# LN: 223 | 
551   	 010F	 84080113		if (a == 0) jmp (else_2)			# LN: 223 | 
552   	 0110				cline_223_0:			/* LN: 224 | CYCLE: 0 | RULES: () */ 
553   	 0110	 884A0001		uhalfword(a0) = (0x1)			# LN: 224 | 
554   	 0111	 98440000		xmem[_enable + 0] = a0h			# LN: 224 | 
555   	 0112	 80080115		jmp (endif_2)			# LN: 224 | 
556   	 0113				cline_224_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
557   	 0113				else_2:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
558   	 0113	 00004DC0		a0 = 0			# LN: 227 | 
559   	 0114	 98440000		xmem[_enable + 0] = a0h			# LN: 227 | 
560   	 0115				cline_227_0:			/* LN: 233 | CYCLE: 0 | RULES: () */ 
561   	 0115				endif_2:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
562   	 0115	 90750002		i0 = i7 - (0x2)			# LN: 233 | 
563   	 0116	 B0140000		i0 = xmem[i0]			# LN: 233 | 
564   	 0117	 91750104		i1 = i7 - (260 - 0)			# LN: 233 | 
565   	 0118	 B8140000		i4 = xmem[i0]			# LN: 233 | 
566   	 0119	 B1090030		i0 = i1			# LN: 233 | 
567   	 011A	 B8090031		i1 = i4			# LN: 233 | 
568   	 011B	 80880000		call (_strcpy)			# LN: 233 | 
569   	 011C				cline_233_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
570   	 011C	 90750104		i0 = i7 - (260 - 0)			# LN: 234 | 
571   	 011D	 80880000		call (_cl_wavread_open)			# LN: 234 | 
572   	 011E	 98090030		AnyReg(i0, a0h)			# LN: 234 | 
573   	 011F	 91750105		i1 = i7 - (0x105)			# LN: 234 | 
574   	 0120	 B0540001		xmem[i1] = i0			# LN: 234 | 
575   	 0121				cline_234_0:			/* LN: 235 | CYCLE: 0 | RULES: () */ 
576   	 0121	 90750105		i0 = i7 - (0x105)			# LN: 235 | 
577   	 0122	 88140000		a0 = xmem[i0]			# LN: 235 | 
578   	 0123	 00004E80		a0 & a0			# LN: 235 | 
579   	 0124	 84480129		if (a != 0) jmp (else_3)			# LN: 235 | 
580   	 0125				cline_235_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
581   	 0125	 A0050000		i0 = (0) + (_string_const_1)			# LN: 237 | 
582   	 0126	 80880000		call (_printf)			# LN: 237 | 
583   	 0127				cline_237_0:			/* LN: 238 | CYCLE: 0 | RULES: () */ 
584   	 0127	 886AFFFF		halfword(a0) = (0xffff)			# LN: 238 | 
585   	 0128	 800801E1		jmp (__epilogue_250)			# LN: 238 | 
586   	 0129				cline_238_0:			/* LN: 244 | CYCLE: 0 | RULES: () */ 
587   	 0129				endif_3:			/* LN: 235 | CYCLE: 0 | RULES: () */ 
588   	 0129				else_3:			/* LN: 235 | CYCLE: 0 | RULES: () */ 
589   	 0129	 90750105		i0 = i7 - (0x105)			# LN: 244 | 
590   	 012A	 B0140000		i0 = xmem[i0]			# LN: 244 | 
591   	 012B	 80880000		call (_cl_wavread_getnchannels)			# LN: 244 | 
592   	 012C	 98440000		xmem[_main_nChannels + 0] = a0h			# LN: 244 | 
593   	 012D				cline_244_0:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
594   	 012D	 90750105		i0 = i7 - (0x105)			# LN: 245 | 
595   	 012E	 B0140000		i0 = xmem[i0]			# LN: 245 | 
596   	 012F	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 245 | 
597   	 0130	 90750106		i0 = i7 - (0x106)			# LN: 245 | 
598   	 0131	 98540000		xmem[i0] = a0h			# LN: 245 | 
599   	 0132				cline_245_0:			/* LN: 246 | CYCLE: 0 | RULES: () */ 
600   	 0132	 90750105		i0 = i7 - (0x105)			# LN: 246 | 
601   	 0133	 B0140000		i0 = xmem[i0]			# LN: 246 | 
602   	 0134	 80880000		call (_cl_wavread_frame_rate)			# LN: 246 | 
603   	 0135	 90750107		i0 = i7 - (0x107)			# LN: 246 | 
604   	 0136	 98540000		xmem[i0] = a0h			# LN: 246 | 
605   	 0137				cline_246_0:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
606   	 0137	 90750105		i0 = i7 - (0x105)			# LN: 247 | 
607   	 0138	 B0140000		i0 = xmem[i0]			# LN: 247 | 
608   	 0139	 80880000		call (_cl_wavread_number_of_frames)			# LN: 247 | 
609   	 013A	 90750108		i0 = i7 - (0x108)			# LN: 247 | 
610   	 013B	 98540000		xmem[i0] = a0h			# LN: 247 | 
611   	 013C				cline_247_0:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
612   	 013C	 90750002		i0 = i7 - (0x2)			# LN: 252 | 
613   	 013D	 B0140000		i0 = xmem[i0]			# LN: 252 | 
614   	 013E	 91750208		i1 = i7 - (520 - 0)			# LN: 252 | 
615   	 013F	 02087FFF		i0 += 1			# LN: 252 | 
616   	 0140	 B8140000		i4 = xmem[i0]			# LN: 252 | 
617   	 0141	 B1090030		i0 = i1			# LN: 252 | 
618   	 0142	 B8090031		i1 = i4			# LN: 252 | 
619   	 0143	 80880000		call (_strcpy)			# LN: 252 | 
620   	 0144				cline_252_0:			/* LN: 253 | CYCLE: 0 | RULES: () */ 
621   	 0144	 90750208		i0 = i7 - (520 - 0)			# LN: 253 | 
622   	 0145	 91750106		i1 = i7 - (0x106)			# LN: 253 | 
623   	 0146	 88140001		a0 = xmem[i1]			# LN: 253 | 
624   	 0147	 89040000		a1 = xmem[_main_nChannels + 0]			# LN: 253 | 
625   	 0148	 91750107		i1 = i7 - (0x107)			# LN: 253 | 
626   	 0149	 8C140001		b0 = xmem[i1]			# LN: 253 | 
627   	 014A	 80880000		call (_cl_wavwrite_open)			# LN: 253 | 
628   	 014B	 98090030		AnyReg(i0, a0h)			# LN: 253 | 
629   	 014C	 91750209		i1 = i7 - (0x209)			# LN: 253 | 
630   	 014D	 B0540001		xmem[i1] = i0			# LN: 253 | 
631   	 014E				cline_253_0:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
632   	 014E	 90750209		i0 = i7 - (0x209)			# LN: 254 | 
633   	 014F	 88140000		a0 = xmem[i0]			# LN: 254 | 
634   	 0150	 00004E80		a0 & a0			# LN: 254 | 
635   	 0151	 84480156		if (a != 0) jmp (else_4)			# LN: 254 | 
636   	 0152				cline_254_0:			/* LN: 256 | CYCLE: 0 | RULES: () */ 
637   	 0152	 A0050000		i0 = (0) + (_string_const_2)			# LN: 256 | 
638   	 0153	 80880000		call (_printf)			# LN: 256 | 
639   	 0154				cline_256_0:			/* LN: 257 | CYCLE: 0 | RULES: () */ 
640   	 0154	 886AFFFF		halfword(a0) = (0xffff)			# LN: 257 | 
641   	 0155	 800801E1		jmp (__epilogue_250)			# LN: 257 | 
642   	 0156				cline_257_0:			/* LN: 260 | CYCLE: 0 | RULES: () */ 
643   	 0156				endif_4:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
644   	 0156				else_4:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
645   	 0156	 887A4000		a0 = (0x4000)			# LN: 260 | 
646   	 0157	 98440000		xmem[_K1 + 0] = a0h			# LN: 260 | 
647   	 0158				cline_260_0:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
648   	 0158	 887A4000		a0 = (0x4000)			# LN: 261 | 
649   	 0159	 98440000		xmem[_K2 + 0] = a0h			# LN: 261 | 
650   	 015A				cline_261_0:			/* LN: 262 | CYCLE: 0 | RULES: () */ 
651   	 015A	 88040000		a0 = xmem[_K1 + 0]			# LN: 262 | 
652   	 015B	 00004E40		a0 = a0 >> 1			# LN: 262 | 
653   	 015C	 98440000		xmem[_K1 + 0] = a0h			# LN: 262 | 
654   	 015D				cline_262_0:			/* LN: 263 | CYCLE: 0 | RULES: () */ 
655   	 015D	 88040000		a0 = xmem[_K2 + 0]			# LN: 263 | 
656   	 015E	 00004E40		a0 = a0 >> 1			# LN: 263 | 
657   	 015F	 98440000		xmem[_K2 + 0] = a0h			# LN: 263 | 
658   	 0160				cline_263_0:			/* LN: 266 | CYCLE: 0 | RULES: () */ 
659   	 0160	 887A4000		a0 = (0x4000)			# LN: 266 | 
660   	 0161	 98440000		xmem[_alpha1 + 0] = a0h			# LN: 266 | 
661   	 0162				cline_266_0:			/* LN: 267 | CYCLE: 0 | RULES: () */ 
662   	 0162	 887AC000		a0 = (0xc000)			# LN: 267 | 
663   	 0163	 98440000		xmem[_alpha2 + 0] = a0h			# LN: 267 | 
664   	 0164				cline_267_0:			/* LN: 268 | CYCLE: 0 | RULES: () */ 
665   	 0164	 88040000		a0 = xmem[_alpha1 + 0]			# LN: 268 | 
666   	 0165	 A0050000		i0 = (0) + (_coeffL)			# LN: 268 | 
667   	 0166	 80880000		call (_calculateShelvingCoeff)			# LN: 268 | 
668   	 0167				cline_268_0:			/* LN: 269 | CYCLE: 0 | RULES: () */ 
669   	 0167	 88040000		a0 = xmem[_alpha2 + 0]			# LN: 269 | 
670   	 0168	 A0050000		i0 = (0) + (_coeffH)			# LN: 269 | 
671   	 0169	 80880000		call (_calculateShelvingCoeff)			# LN: 269 | 
672   	 016A				cline_269_0:			/* LN: 278 | CYCLE: 0 | RULES: () */ 
673   	 016A	 90750108		i0 = i7 - (0x108)			# LN: 278 | 
674   	 016B	 88140000		a0 = xmem[i0]			# LN: 278 | 
675   	 016C	 894A0010		uhalfword(a1) = (0x10)			# LN: 278 | 
676   	 016D	 80880000		call (__div)			# LN: 278 | 
677   	 016E	 98440000		xmem[_main_h + 0] = a0h			# LN: 278 | 
678   	 016F				cline_278_0:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
679   	 016F	 90750003		i0 = i7 - (0x3)			# LN: 280 | 
680   	 0170	 00004DC0		a0 = 0			# LN: 280 | 
681   	 0171	 98540000		xmem[i0] = a0h			# LN: 280 | 
682   	 0172				for_3:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
683   	 0172	 90750003		i0 = i7 - (0x3)			# LN: 280 | 
684   	 0173	 88140000		a0 = xmem[i0]			# LN: 280 | 
685   	 0174	 89040000		a1 = xmem[_main_h + 0]			# LN: 280 | 
686   	 0175	 00004F08		a0 - a1			# LN: 280 | 
687   	 0176	 84C801D9		if (a >= 0) jmp (for_end_3)			# LN: 280 | 
688   	 0177				cline_280_0:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
689   	 0177	 90750004		i0 = i7 - (0x4)			# LN: 282 | 
690   	 0178	 00004DC0		a0 = 0			# LN: 282 | 
691   	 0179	 98540000		xmem[i0] = a0h			# LN: 282 | 
692   	 017A	 810001A1		do (0x10), label_end_95			# LN: 282 | 
693   	 017B				cline_282_0:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
694   	 017B				label_begin_95:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
695   	 017B	 9075020A		i0 = i7 - (0x20a)			# LN: 284 | 
696   	 017C	 00004DC0		a0 = 0			# LN: 284 | 
697   	 017D	 98540000		xmem[i0] = a0h			# LN: 284 | 
698   	 017E				for_5:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
699   	 017E	 9075020A		i0 = i7 - (0x20a)			# LN: 284 | 
700   	 017F	 88140000		a0 = xmem[i0]			# LN: 284 | 
701   	 0180	 89040000		a1 = xmem[_main_nChannels + 0]			# LN: 284 | 
702   	 0181	 00004F08		a0 - a1			# LN: 284 | 
703   	 0182	 84C8019C		if (a >= 0) jmp (for_end_5)			# LN: 284 | 
704   	 0183				cline_284_0:			/* LN: 286 | CYCLE: 0 | RULES: () */ 
705   	 0183	 90750105		i0 = i7 - (0x105)			# LN: 286 | 
706   	 0184	 B0140000		i0 = xmem[i0]			# LN: 286 | 
707   	 0185	 80880000		call (_cl_wavread_recvsample)			# LN: 286 | 
708   	 0186	 9075020B		i0 = i7 - (0x20b)			# LN: 286 | 
709   	 0187	 98540000		xmem[i0] = a0h			# LN: 286 | 
710   	 0188				cline_286_0:			/* LN: 287 | CYCLE: 0 | RULES: () */ 
711   	 0188	 9075020A		i0 = i7 - (0x20a)			# LN: 287 | 
712   	 0189	 88140000		a0 = xmem[i0]			# LN: 287 | 
713   	 018A	 00004EC0		a0 = a0 << 4			# LN: 287 | 
714   	 018B	 48707FFF		i0 = a0			# LN: 287 | 
715   	 018C	 91750004		i1 = i7 - (0x4)			# LN: 287 | 
716   	 018D	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 287 | 
717   	 018E	 88140001		a0 = xmem[i1]			# LN: 287 | 
718   	 018F	 09707FFF		a1 = i0			# LN: 287 | 
719   	 0190	 00004480		a0 = a1 + a0			# LN: 287 | 
720   	 0191	 98090030		AnyReg(i0, a0h)			# LN: 287 | 
721   	 0192	 9175020B		i1 = i7 - (0x20b)			# LN: 287 | 
722   	 0193	 88140001		a0 = xmem[i1]			# LN: 287 | 
723   	 0194	 98D40000		ymem[i0] = a0h			# LN: 287 | 
724   	 0195				cline_287_0:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
725   	 0195				init_latch_label_3:			/* LN: 288 | CYCLE: 0 | RULES: () */ 
726   	 0195	 9075020A		i0 = i7 - (0x20a)			# LN: 284 | 
727   	 0196	 88140000		a0 = xmem[i0]			# LN: 284 | 
728   	 0197	 894A0001		uhalfword(a1) = (0x1)			# LN: 284 | 
729   	 0198	 00004408		a0 = a0 + a1			# LN: 284 | 
730   	 0199	 9075020A		i0 = i7 - (0x20a)			# LN: 284 | 
731   	 019A	 98540000		xmem[i0] = a0h			# LN: 284 | 
732   	 019B	 8008017E		jmp (for_5)			# LN: 284 | 
733   	 019C				cline_284_1:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
734   	 019C				init_latch_label_4:			/* LN: 289 | CYCLE: 0 | RULES: () */ 
735   	 019C				for_end_5:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
736   	 019C	 90750004		i0 = i7 - (0x4)			# LN: 282 | 
737   	 019D	 88140000		a0 = xmem[i0]			# LN: 282 | 
738   	 019E	 894A0001		uhalfword(a1) = (0x1)			# LN: 282 | 
739   	 019F	 00004408		a0 = a0 + a1			# LN: 282 | 
740   	 01A0	 90750004		i0 = i7 - (0x4)			# LN: 282 | 
741   	 01A1				label_end_95:			# LN: 282 | CYCLE: 5 | RULES: ()
742   	 01A1	 98540000		xmem[i0] = a0h			# LN: 282 | 
743   	 01A2				cline_282_1:			/* LN: 290 | CYCLE: 0 | RULES: () */ 
744   	 01A2				for_end_4:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
745   	 01A2	 88040000		a0 = xmem[_enable + 0]			# LN: 290 | 
746   	 01A3	 00004E80		a0 & a0			# LN: 290 | 
747   	 01A4	 840801A7		if (a == 0) jmp (else_5)			# LN: 290 | 
748   	 01A5				cline_290_0:			/* LN: 291 | CYCLE: 0 | RULES: () */ 
749   	 01A5	 808801E4		call (_processing)			# LN: 291 | 
750   	 01A6	 800801A7		jmp (endif_5)			# LN: 291 | 
751   	 01A7				cline_291_0:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
752   	 01A7				endif_5:			/* LN: 290 | CYCLE: 0 | RULES: () */ 
753   	 01A7				else_5:			/* LN: 290 | CYCLE: 0 | RULES: () */ 
754   	 01A7	 90750004		i0 = i7 - (0x4)			# LN: 293 | 
755   	 01A8	 00004DC0		a0 = 0			# LN: 293 | 
756   	 01A9	 98540000		xmem[i0] = a0h			# LN: 293 | 
757   	 01AA	 810001D1		do (0x10), label_end_96			# LN: 293 | 
758   	 01AB				cline_293_0:			/* LN: 295 | CYCLE: 0 | RULES: () */ 
759   	 01AB				label_begin_96:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
760   	 01AB	 9075020A		i0 = i7 - (0x20a)			# LN: 295 | 
761   	 01AC	 00004DC0		a0 = 0			# LN: 295 | 
762   	 01AD	 98540000		xmem[i0] = a0h			# LN: 295 | 
763   	 01AE				for_7:			/* LN: 295 | CYCLE: 0 | RULES: () */ 
764   	 01AE	 9075020A		i0 = i7 - (0x20a)			# LN: 295 | 
765   	 01AF	 88140000		a0 = xmem[i0]			# LN: 295 | 
766   	 01B0	 89040000		a1 = xmem[_main_nChannels + 0]			# LN: 295 | 
767   	 01B1	 00004F08		a0 - a1			# LN: 295 | 
768   	 01B2	 84C801CC		if (a >= 0) jmp (for_end_7)			# LN: 295 | 
769   	 01B3				cline_295_0:			/* LN: 297 | CYCLE: 0 | RULES: () */ 
770   	 01B3	 9075020A		i0 = i7 - (0x20a)			# LN: 297 | 
771   	 01B4	 88140000		a0 = xmem[i0]			# LN: 297 | 
772   	 01B5	 00004EC0		a0 = a0 << 4			# LN: 297 | 
773   	 01B6	 48707FFF		i0 = a0			# LN: 297 | 
774   	 01B7	 91750004		i1 = i7 - (0x4)			# LN: 297 | 
775   	 01B8	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 297 | 
776   	 01B9	 88140001		a0 = xmem[i1]			# LN: 297 | 
777   	 01BA	 09707FFF		a1 = i0			# LN: 297 | 
778   	 01BB	 00004480		a0 = a1 + a0			# LN: 297 | 
779   	 01BC	 98090030		AnyReg(i0, a0h)			# LN: 297 | 
780   	 01BD	 9175020B		i1 = i7 - (0x20b)			# LN: 297 | 
781   	 01BE	 88940000		a0 = ymem[i0]			# LN: 297 | 
782   	 01BF	 98540001		xmem[i1] = a0h			# LN: 297 | 
783   	 01C0				cline_297_0:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
784   	 01C0	 90750209		i0 = i7 - (0x209)			# LN: 298 | 
785   	 01C1	 9175020B		i1 = i7 - (0x20b)			# LN: 298 | 
786   	 01C2	 88140001		a0 = xmem[i1]			# LN: 298 | 
787   	 01C3	 B0140000		i0 = xmem[i0]			# LN: 298 | 
788   	 01C4	 80880000		call (_cl_wavwrite_sendsample)			# LN: 298 | 
789   	 01C5				cline_298_0:			/* LN: 295 | CYCLE: 0 | RULES: () */ 
790   	 01C5				init_latch_label_5:			/* LN: 299 | CYCLE: 0 | RULES: () */ 
791   	 01C5	 9075020A		i0 = i7 - (0x20a)			# LN: 295 | 
792   	 01C6	 88140000		a0 = xmem[i0]			# LN: 295 | 
793   	 01C7	 894A0001		uhalfword(a1) = (0x1)			# LN: 295 | 
794   	 01C8	 00004408		a0 = a0 + a1			# LN: 295 | 
795   	 01C9	 9075020A		i0 = i7 - (0x20a)			# LN: 295 | 
796   	 01CA	 98540000		xmem[i0] = a0h			# LN: 295 | 
797   	 01CB	 800801AE		jmp (for_7)			# LN: 295 | 
798   	 01CC				cline_295_1:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
799   	 01CC				init_latch_label_6:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
800   	 01CC				for_end_7:			/* LN: 295 | CYCLE: 0 | RULES: () */ 
801   	 01CC	 90750004		i0 = i7 - (0x4)			# LN: 293 | 
802   	 01CD	 88140000		a0 = xmem[i0]			# LN: 293 | 
803   	 01CE	 894A0001		uhalfword(a1) = (0x1)			# LN: 293 | 
804   	 01CF	 00004408		a0 = a0 + a1			# LN: 293 | 
805   	 01D0	 90750004		i0 = i7 - (0x4)			# LN: 293 | 
806   	 01D1				label_end_96:			# LN: 293 | CYCLE: 5 | RULES: ()
807   	 01D1	 98540000		xmem[i0] = a0h			# LN: 293 | 
808   	 01D2				cline_293_1:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
809   	 01D2				init_latch_label_7:			/* LN: 301 | CYCLE: 0 | RULES: () */ 
810   	 01D2				for_end_6:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
811   	 01D2	 90750003		i0 = i7 - (0x3)			# LN: 280 | 
812   	 01D3	 88140000		a0 = xmem[i0]			# LN: 280 | 
813   	 01D4	 894A0001		uhalfword(a1) = (0x1)			# LN: 280 | 
814   	 01D5	 00004408		a0 = a0 + a1			# LN: 280 | 
815   	 01D6	 90750003		i0 = i7 - (0x3)			# LN: 280 | 
816   	 01D7	 98540000		xmem[i0] = a0h			# LN: 280 | 
817   	 01D8	 80080172		jmp (for_3)			# LN: 280 | 
818   	 01D9				cline_280_1:			/* LN: 306 | CYCLE: 0 | RULES: () */ 
819   	 01D9				for_end_3:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
820   	 01D9	 90750105		i0 = i7 - (0x105)			# LN: 306 | 
821   	 01DA	 B0140000		i0 = xmem[i0]			# LN: 306 | 
822   	 01DB	 80880000		call (_cl_wavread_close)			# LN: 306 | 
823   	 01DC				cline_306_0:			/* LN: 307 | CYCLE: 0 | RULES: () */ 
824   	 01DC	 90750209		i0 = i7 - (0x209)			# LN: 307 | 
825   	 01DD	 B0140000		i0 = xmem[i0]			# LN: 307 | 
826   	 01DE	 80880000		call (_cl_wavwrite_close)			# LN: 307 | 
827   	 01DF				cline_307_0:			/* LN: 310 | CYCLE: 0 | RULES: () */ 
828   	 01DF	 00004DC0		a0 = 0			# LN: 310 | 
829   	 01E0	 800801E1		jmp (__epilogue_250)			# LN: 310 | 
830   	 01E1				cline_310_0:			/* LN: 311 | CYCLE: 0 | RULES: () */ 
831   	 01E1				__epilogue_250:			/* LN: 311 | CYCLE: 0 | RULES: () */ 
832   	 01E1	 9775020B		i7 = i7 - (0x20b)			# LN: 311 | 
833   	 01E2	 02177FFF		i7 -= 1			# LN: 311 | 
834   	 01E3	 81880000		ret			# LN: 311 | 
835   						
836   						
837   						
838   	 01E4				_processing:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
839   	 01E4	 BB540007		xmem[i7] = i7			# LN: 135 | 
840   	 01E5	 020F7FFF		i7 += 1			# LN: 135 | 
841   	 01E6	 87750001		i7 = i7 + (0x1)			# LN: 135 | 
842   	 01E7				cline_135_0:			/* LN: 140 | CYCLE: 0 | RULES: () */ 
843   	 01E7	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 140 | 
844   	 01E8	 B0440000		xmem[_sb_ptr0 + 0] = i0			# LN: 140 | 
845   	 01E9				cline_140_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
846   	 01E9	 90750001		i0 = i7 - (0x1)			# LN: 149 | 
847   	 01EA	 00004DC0		a0 = 0			# LN: 149 | 
848   	 01EB	 98540000		xmem[i0] = a0h			# LN: 149 | 
849   	 01EC	 8100020C		do (0x10), label_end_92			# LN: 149 | 
850   	 01ED				cline_149_0:			/* LN: 152 | CYCLE: 0 | RULES: () */ 
851   	 01ED				label_begin_92:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
852   	 01ED	 B0040000		i0 = xmem[_sb_ptr0 + 0]			# LN: 152 | 
853   	 01EE	 A1050000		i1 = (0) + (_z_xH)			# LN: 152 | 
854   	 01EF	 88940000		a0 = ymem[i0]			# LN: 152 | 
855   	 01F0	 A4050000		i4 = (0) + (_z_yH)			# LN: 152 | 
856   	 01F1	 B1090030		i0 = i1			# LN: 152 | 
857   	 01F2	 B8090031		i1 = i4			# LN: 152 | 
858   	 01F3	 80880211		call (_shelvingHP)			# LN: 152 | 
859   	 01F4	 A0050000		i0 = (0) + (_sb_ptr0)			# LN: 152 | 
860   	 01F5	 B0140000		i0 = xmem[i0]			# LN: 152 | 
861   	 01F6	 00007FFF		nop #empty cycle
862   	 01F7	 98D40000		ymem[i0] = a0h			# LN: 152 | 
863   	 01F8				cline_152_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
864   	 01F8	 B0040000		i0 = xmem[_sb_ptr0 + 0]			# LN: 153 | 
865   	 01F9	 A1050000		i1 = (0) + (_z_xL)			# LN: 153 | 
866   	 01FA	 88940000		a0 = ymem[i0]			# LN: 153 | 
867   	 01FB	 A4050000		i4 = (0) + (_z_yL)			# LN: 153 | 
868   	 01FC	 B1090030		i0 = i1			# LN: 153 | 
869   	 01FD	 B8090031		i1 = i4			# LN: 153 | 
870   	 01FE	 80880245		call (_shelvingLP)			# LN: 153 | 
871   	 01FF	 A0050000		i0 = (0) + (_sb_ptr0)			# LN: 153 | 
872   	 0200	 B0140000		i0 = xmem[i0]			# LN: 153 | 
873   	 0201	 00007FFF		nop #empty cycle
874   	 0202	 98D40000		ymem[i0] = a0h			# LN: 153 | 
875   	 0203				cline_153_0:			/* LN: 154 | CYCLE: 0 | RULES: () */ 
876   	 0203	 B0040000		i0 = xmem[_sb_ptr0 + 0]			# LN: 154 | 
877   	 0204	 00007FFF		nop #empty cycle
878   	 0205	 02087FFF		i0 += 1			# LN: 154 | 
879   	 0206	 B0440000		xmem[_sb_ptr0 + 0] = i0			# LN: 154 | 
880   	 0207				cline_154_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
881   	 0207				init_latch_label_0:			/* LN: 180 | CYCLE: 0 | RULES: () */ 
882   	 0207	 90750001		i0 = i7 - (0x1)			# LN: 149 | 
883   	 0208	 88140000		a0 = xmem[i0]			# LN: 149 | 
884   	 0209	 894A0001		uhalfword(a1) = (0x1)			# LN: 149 | 
885   	 020A	 00004408		a0 = a0 + a1			# LN: 149 | 
886   	 020B	 90750001		i0 = i7 - (0x1)			# LN: 149 | 
887   	 020C				label_end_92:			# LN: 149 | CYCLE: 5 | RULES: ()
888   	 020C	 98540000		xmem[i0] = a0h			# LN: 149 | 
889   	 020D				cline_149_1:			/* LN: 182 | CYCLE: 0 | RULES: () */ 
890   	 020D				for_end_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
891   	 020D	 8008020E		jmp (__epilogue_248)			# LN: 182 | 
892   	 020E				__epilogue_248:			/* LN: 182 | CYCLE: 0 | RULES: () */ 
893   	 020E	 97750001		i7 = i7 - (0x1)			# LN: 182 | 
894   	 020F	 02177FFF		i7 -= 1			# LN: 182 | 
895   	 0210	 81880000		ret			# LN: 182 | 
896   						
897   						
898   						
899   	 0211				_shelvingHP:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
900   	 0211	 BB540007		xmem[i7] = i7			# LN: 94 | 
901   	 0212	 020F7FFF		i7 += 1			# LN: 94 | 
902   	 0213	 87750006		i7 = i7 + (0x6)			# LN: 94 | 
903   	 0214	 94750001		i4 = i7 - (0x1)			# LN: 94 | 
904   	 0215	 98540004		xmem[i4] = a0h			# LN: 94 | 
905   	 0216	 94750002		i4 = i7 - (0x2)			# LN: 94 | 
906   	 0217	 B0540004		xmem[i4] = i0			# LN: 94 | 
907   	 0218	 90750003		i0 = i7 - (0x3)			# LN: 94 | 
908   	 0219	 B1540000		xmem[i0] = i1			# LN: 94 | 
909   	 021A				cline_94_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
910   	 021A	 91750002		i1 = i7 - (0x2)			# LN: 99 | 
911   	 021B	 B1140001		i1 = xmem[i1]			# LN: 99 | 
912   	 021C	 94750003		i4 = i7 - (0x3)			# LN: 99 | 
913   	 021D	 B8140004		i4 = xmem[i4]			# LN: 99 | 
914   	 021E	 95750001		i5 = i7 - (0x1)			# LN: 99 | 
915   	 021F	 88140005		a0 = xmem[i5]			# LN: 99 | 
916   	 0220	 A0050000		i0 = (0) + (_coeffH)			# LN: 99 | 
917   	 0221	 80880050		call (_first_order_IIR)			# LN: 99 | 
918   	 0222	 90750004		i0 = i7 - (0x4)			# LN: 99 | 
919   	 0223	 88540000		xmem[i0] = a0			# LN: 99 | 
920   	 0224				cline_99_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
921   	 0224	 90750001		i0 = i7 - (0x1)			# LN: 101 | 
922   	 0225	 88140000		a0 = xmem[i0]			# LN: 101 | 
923   	 0226	 90750004		i0 = i7 - (0x4)			# LN: 101 | 
924   	 0227	 89140000		a1 = xmem[i0]			# LN: 101 | 
925   	 0228	 00004448		a0 = a0 - a1			# LN: 101 | 
926   	 0229	 00004E40		a0 = a0 >> 1			# LN: 101 | 
927   	 022A	 90750006		i0 = i7 - (0x6)			# LN: 101 | 
928   	 022B	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 101, 101 | 
929   	 022C	 90540000		xmem[i0] = a0l			# LN: 101 | 
930   	 022D				cline_101_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
931   	 022D	 90750001		i0 = i7 - (0x1)			# LN: 103 | 
932   	 022E	 88140000		a0 = xmem[i0]			# LN: 103 | 
933   	 022F	 90750004		i0 = i7 - (0x4)			# LN: 103 | 
934   	 0230	 89140000		a1 = xmem[i0]			# LN: 103 | 
935   	 0231	 80040000		x0 = xmem[_K2 + 0]			# LN: 103 | 
936   	 0232	 90750006		i0 = i7 - (0x6)			# LN: 103 | 
937   	 0233	 8C140010		b0 = xmem[i0]; i0 += 1			# LN: 103, 103 | 
938   	 0234	 00004408		a0 = a0 + a1			# LN: 103 | 
939   	 0235	 94140000		b0l = xmem[i0]			# LN: 103 | 
940   	 0236	 01584C20		x1 = a0h; a0 =+ b0			# LN: 103, 103 | 
941   	 0237	 00002028		a0 += x1 * x0			# LN: 103 | 
942   	 0238	 90750006		i0 = i7 - (0x6)			# LN: 103 | 
943   	 0239	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 103, 103 | 
944   	 023A	 90540000		xmem[i0] = a0l			# LN: 103 | 
945   	 023B				cline_103_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
946   	 023B	 90750006		i0 = i7 - (0x6)			# LN: 106 | 
947   	 023C	 8088002D		call (_clip)			# LN: 106 | 
948   	 023D				cline_106_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
949   	 023D	 90750006		i0 = i7 - (0x6)			# LN: 110 | 
950   	 023E	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 110, 110 | 
951   	 023F	 90140000		a0l = xmem[i0]			# LN: 110 | 
952   	 0240	 48487FFF		a0 = a0			# LN: 110 | 
953   	 0241	 80080242		jmp (__epilogue_244)			# LN: 110 | 
954   	 0242				cline_110_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
955   	 0242				__epilogue_244:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
956   	 0242	 97750006		i7 = i7 - (0x6)			# LN: 112 | 
957   	 0243	 02177FFF		i7 -= 1			# LN: 112 | 
958   	 0244	 81880000		ret			# LN: 112 | 
959   						
960   						
961   						
962   	 0245				_shelvingLP:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
963   	 0245	 BB540007		xmem[i7] = i7			# LN: 79 | 
964   	 0246	 020F7FFF		i7 += 1			# LN: 79 | 
965   	 0247	 87750006		i7 = i7 + (0x6)			# LN: 79 | 
966   	 0248	 94750001		i4 = i7 - (0x1)			# LN: 79 | 
967   	 0249	 98540004		xmem[i4] = a0h			# LN: 79 | 
968   	 024A	 94750002		i4 = i7 - (0x2)			# LN: 79 | 
969   	 024B	 B0540004		xmem[i4] = i0			# LN: 79 | 
970   	 024C	 90750003		i0 = i7 - (0x3)			# LN: 79 | 
971   	 024D	 B1540000		xmem[i0] = i1			# LN: 79 | 
972   	 024E				cline_79_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
973   	 024E	 91750002		i1 = i7 - (0x2)			# LN: 84 | 
974   	 024F	 B1140001		i1 = xmem[i1]			# LN: 84 | 
975   	 0250	 94750003		i4 = i7 - (0x3)			# LN: 84 | 
976   	 0251	 B8140004		i4 = xmem[i4]			# LN: 84 | 
977   	 0252	 95750001		i5 = i7 - (0x1)			# LN: 84 | 
978   	 0253	 88140005		a0 = xmem[i5]			# LN: 84 | 
979   	 0254	 A0050000		i0 = (0) + (_coeffL)			# LN: 84 | 
980   	 0255	 80880050		call (_first_order_IIR)			# LN: 84 | 
981   	 0256	 90750004		i0 = i7 - (0x4)			# LN: 84 | 
982   	 0257	 88540000		xmem[i0] = a0			# LN: 84 | 
983   	 0258				cline_84_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
984   	 0258	 90750001		i0 = i7 - (0x1)			# LN: 85 | 
985   	 0259	 88140000		a0 = xmem[i0]			# LN: 85 | 
986   	 025A	 90750004		i0 = i7 - (0x4)			# LN: 85 | 
987   	 025B	 89140000		a1 = xmem[i0]			# LN: 85 | 
988   	 025C	 00004408		a0 = a0 + a1			# LN: 85 | 
989   	 025D	 00004E40		a0 = a0 >> 1			# LN: 85 | 
990   	 025E	 90750006		i0 = i7 - (0x6)			# LN: 85 | 
991   	 025F	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 85, 85 | 
992   	 0260	 90540000		xmem[i0] = a0l			# LN: 85 | 
993   	 0261				cline_85_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
994   	 0261	 90750001		i0 = i7 - (0x1)			# LN: 86 | 
995   	 0262	 88140000		a0 = xmem[i0]			# LN: 86 | 
996   	 0263	 90750004		i0 = i7 - (0x4)			# LN: 86 | 
997   	 0264	 89140000		a1 = xmem[i0]			# LN: 86 | 
998   	 0265	 80040000		x0 = xmem[_K1 + 0]			# LN: 86 | 
999   	 0266	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
1000  	 0267	 8C140010		b0 = xmem[i0]; i0 += 1			# LN: 86, 86 | 
1001  	 0268	 00004448		a0 = a0 - a1			# LN: 86 | 
1002  	 0269	 94140000		b0l = xmem[i0]			# LN: 86 | 
1003  	 026A	 01584C20		x1 = a0h; a0 =+ b0			# LN: 86, 86 | 
1004  	 026B	 00002028		a0 += x1 * x0			# LN: 86 | 
1005  	 026C	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
1006  	 026D	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 86, 86 | 
1007  	 026E	 90540000		xmem[i0] = a0l			# LN: 86 | 
1008  	 026F				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
1009  	 026F	 90750006		i0 = i7 - (0x6)			# LN: 87 | 
1010  	 0270	 8088002D		call (_clip)			# LN: 87 | 
1011  	 0271				cline_87_0:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
1012  	 0271	 90750006		i0 = i7 - (0x6)			# LN: 90 | 
1013  	 0272	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 90, 90 | 
1014  	 0273	 90140000		a0l = xmem[i0]			# LN: 90 | 
1015  	 0274	 48487FFF		a0 = a0			# LN: 90 | 
1016  	 0275	 80080276		jmp (__epilogue_242)			# LN: 90 | 
1017  	 0276				cline_90_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
1018  	 0276				__epilogue_242:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
1019  	 0276	 97750006		i7 = i7 - (0x6)			# LN: 92 | 
1020  	 0277	 02177FFF		i7 -= 1			# LN: 92 | 
1021  	 0278	 81880000		ret			# LN: 92 | 
1022  						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_Fch                                                                            			  Unused Relocatable        main_GEN_0000:0000H
_Fcl                                                                            			  Unused Relocatable        main_GEN_0001:0000H
_K1                                                                             			  Public Relocatable       main_GEN_0002:0000H
_K2                                                                             			  Public Relocatable       main_GEN_0003:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_238                                                                  			         Relocatable         main_GEN_0029:004DH
__epilogue_240                                                                  			         Relocatable         main_GEN_0029:00A2H
__epilogue_242                                                                  			         Relocatable         main_GEN_0029:0276H
__epilogue_244                                                                  			         Relocatable         main_GEN_0029:0242H
__epilogue_246                                                                  			         Relocatable         main_GEN_0029:002AH
__epilogue_248                                                                  			         Relocatable         main_GEN_0029:020EH
__epilogue_250                                                                  			         Relocatable         main_GEN_0029:01E1H
__start                                                                         					 External   
_alpha1                                                                         			         Relocatable         main_GEN_0004:0000H
_alpha2                                                                         			         Relocatable         main_GEN_0005:0000H
_calculateShelvingCoeff                                                         			  Public Relocatable       main_GEN_0029:0000H
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_clip                                                                           			  Public Relocatable       main_GEN_0029:002DH
_coeffH                                                                         			  Public Relocatable       main_GEN_0006:0000H
_coeffL                                                                         			  Public Relocatable       main_GEN_0007:0000H
_enable                                                                         			  Public Relocatable       main_GEN_0008:0000H
_first_order_IIR                                                                			  Public Relocatable       main_GEN_0029:0050H
_main                                                                           			  Public Relocatable       main_GEN_0029:00A5H
_main_h                                                                         			         Relocatable         main_GEN_0009:0000H
_main_nChannels                                                                 			         Relocatable         main_GEN_0010:0000H
_printf                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0029:01E4H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0011:0000H
_sb_ptr0                                                                        			  Public Relocatable       main_GEN_0012:0000H
_sb_ptr1                                                                        			  Public Relocatable       main_GEN_0013:0000H
_sb_ptr2                                                                        			  Public Relocatable       main_GEN_0014:0000H
_sb_ptr3                                                                        			  Public Relocatable       main_GEN_0015:0000H
_sb_ptr4                                                                        			  Public Relocatable       main_GEN_0016:0000H
_sb_ptr5                                                                        			  Public Relocatable       main_GEN_0017:0000H
_sb_ptr6                                                                        			  Public Relocatable       main_GEN_0018:0000H
_sb_ptr7                                                                        			  Public Relocatable       main_GEN_0019:0000H
_shelvingHP                                                                     			  Public Relocatable       main_GEN_0029:0211H
_shelvingLP                                                                     			  Public Relocatable       main_GEN_0029:0245H
_strcmp                                                                         					 External   
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0020:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0021:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0022:0000H
_test_n                                                                         			         Relocatable         main_GEN_0023:0000H
_test_p                                                                         			         Relocatable         main_GEN_0024:0000H
_z_xH                                                                           			  Public Relocatable       main_GEN_0025:0000H
_z_xL                                                                           			  Public Relocatable       main_GEN_0026:0000H
_z_yH                                                                           			  Public Relocatable       main_GEN_0027:0000H
_z_yL                                                                           			  Public Relocatable       main_GEN_0028:0000H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0029:022DH
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0029:023BH
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0029:023DH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0029:0242H
cline_117_0                                                                     			  Unused Relocatable        main_GEN_0029:0007H
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0029:000BH
cline_122_0                                                                     			  Unused Relocatable        main_GEN_0029:000DH
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0029:0012H
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0029:0014H
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0029:0019H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0029:001EH
cline_130_0                                                                     			  Unused Relocatable        main_GEN_0029:0023H
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0029:0029H
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0029:01E7H
cline_140_0                                                                     			  Unused Relocatable        main_GEN_0029:01E9H
cline_149_0                                                                     			  Unused Relocatable        main_GEN_0029:01EDH
cline_149_1                                                                     			  Unused Relocatable        main_GEN_0029:020DH
cline_152_0                                                                     			  Unused Relocatable        main_GEN_0029:01F8H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0029:0203H
cline_154_0                                                                     			  Unused Relocatable        main_GEN_0029:0207H
cline_183_0                                                                     			  Unused Relocatable        main_GEN_0029:00ACH
cline_198_0                                                                     			  Unused Relocatable        main_GEN_0029:00B0H
cline_198_1                                                                     			  Unused Relocatable        main_GEN_0029:0108H
cline_199_0                                                                     			  Unused Relocatable        main_GEN_0029:00B7H
cline_200_0                                                                     			  Unused Relocatable        main_GEN_0029:00BFH
cline_202_0                                                                     			  Unused Relocatable        main_GEN_0029:00C6H
cline_203_0                                                                     			  Unused Relocatable        main_GEN_0029:00CEH
cline_206_0                                                                     			  Unused Relocatable        main_GEN_0029:00D5H
cline_207_0                                                                     			  Unused Relocatable        main_GEN_0029:00DDH
cline_209_0                                                                     			  Unused Relocatable        main_GEN_0029:00E4H
cline_210_0                                                                     			  Unused Relocatable        main_GEN_0029:00ECH
cline_215_0                                                                     			  Unused Relocatable        main_GEN_0029:00F0H
cline_215_1                                                                     			  Unused Relocatable        main_GEN_0029:0102H
cline_217_0                                                                     			  Unused Relocatable        main_GEN_0029:00FCH
cline_223_0                                                                     			  Unused Relocatable        main_GEN_0029:0110H
cline_224_0                                                                     			  Unused Relocatable        main_GEN_0029:0113H
cline_227_0                                                                     			  Unused Relocatable        main_GEN_0029:0115H
cline_233_0                                                                     			  Unused Relocatable        main_GEN_0029:011CH
cline_234_0                                                                     			  Unused Relocatable        main_GEN_0029:0121H
cline_235_0                                                                     			  Unused Relocatable        main_GEN_0029:0125H
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0029:0127H
cline_238_0                                                                     			  Unused Relocatable        main_GEN_0029:0129H
cline_244_0                                                                     			  Unused Relocatable        main_GEN_0029:012DH
cline_245_0                                                                     			  Unused Relocatable        main_GEN_0029:0132H
cline_246_0                                                                     			  Unused Relocatable        main_GEN_0029:0137H
cline_247_0                                                                     			  Unused Relocatable        main_GEN_0029:013CH
cline_252_0                                                                     			  Unused Relocatable        main_GEN_0029:0144H
cline_253_0                                                                     			  Unused Relocatable        main_GEN_0029:014EH
cline_254_0                                                                     			  Unused Relocatable        main_GEN_0029:0152H
cline_256_0                                                                     			  Unused Relocatable        main_GEN_0029:0154H
cline_257_0                                                                     			  Unused Relocatable        main_GEN_0029:0156H
cline_260_0                                                                     			  Unused Relocatable        main_GEN_0029:0158H
cline_261_0                                                                     			  Unused Relocatable        main_GEN_0029:015AH
cline_262_0                                                                     			  Unused Relocatable        main_GEN_0029:015DH
cline_263_0                                                                     			  Unused Relocatable        main_GEN_0029:0160H
cline_266_0                                                                     			  Unused Relocatable        main_GEN_0029:0162H
cline_267_0                                                                     			  Unused Relocatable        main_GEN_0029:0164H
cline_268_0                                                                     			  Unused Relocatable        main_GEN_0029:0167H
cline_269_0                                                                     			  Unused Relocatable        main_GEN_0029:016AH
cline_278_0                                                                     			  Unused Relocatable        main_GEN_0029:016FH
cline_280_0                                                                     			  Unused Relocatable        main_GEN_0029:0177H
cline_280_1                                                                     			  Unused Relocatable        main_GEN_0029:01D9H
cline_282_0                                                                     			  Unused Relocatable        main_GEN_0029:017BH
cline_282_1                                                                     			  Unused Relocatable        main_GEN_0029:01A2H
cline_284_0                                                                     			  Unused Relocatable        main_GEN_0029:0183H
cline_284_1                                                                     			  Unused Relocatable        main_GEN_0029:019CH
cline_286_0                                                                     			  Unused Relocatable        main_GEN_0029:0188H
cline_287_0                                                                     			  Unused Relocatable        main_GEN_0029:0195H
cline_290_0                                                                     			  Unused Relocatable        main_GEN_0029:01A5H
cline_291_0                                                                     			  Unused Relocatable        main_GEN_0029:01A7H
cline_293_0                                                                     			  Unused Relocatable        main_GEN_0029:01ABH
cline_293_1                                                                     			  Unused Relocatable        main_GEN_0029:01D2H
cline_295_0                                                                     			  Unused Relocatable        main_GEN_0029:01B3H
cline_295_1                                                                     			  Unused Relocatable        main_GEN_0029:01CCH
cline_297_0                                                                     			  Unused Relocatable        main_GEN_0029:01C0H
cline_298_0                                                                     			  Unused Relocatable        main_GEN_0029:01C5H
cline_306_0                                                                     			  Unused Relocatable        main_GEN_0029:01DCH
cline_307_0                                                                     			  Unused Relocatable        main_GEN_0029:01DFH
cline_310_0                                                                     			  Unused Relocatable        main_GEN_0029:01E1H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0029:0032H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0029:0039H
cline_49_0                                                                      			  Unused Relocatable        main_GEN_0029:003FH
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0029:0046H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0029:004CH
cline_57_0                                                                      			  Unused Relocatable        main_GEN_0029:005BH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0029:0060H
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0029:006BH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0029:007AH
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0029:0089H
cline_70_0                                                                      			  Unused Relocatable        main_GEN_0029:008FH
cline_74_0                                                                      			  Unused Relocatable        main_GEN_0029:0096H
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0029:009DH
cline_77_0                                                                      			  Unused Relocatable        main_GEN_0029:00A2H
cline_79_0                                                                      			  Unused Relocatable        main_GEN_0029:024EH
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0029:0258H
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0029:0261H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0029:026FH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0029:0271H
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0029:0276H
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0029:021AH
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0029:0224H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0029:003FH
else_1                                                                          			         Relocatable         main_GEN_0029:004CH
else_2                                                                          			         Relocatable         main_GEN_0029:0113H
else_3                                                                          			         Relocatable         main_GEN_0029:0129H
else_4                                                                          			         Relocatable         main_GEN_0029:0156H
else_5                                                                          			         Relocatable         main_GEN_0029:01A7H
endif_0                                                                         			         Relocatable         main_GEN_0029:004CH
endif_1                                                                         			         Relocatable         main_GEN_0029:004CH
endif_2                                                                         			         Relocatable         main_GEN_0029:0115H
endif_3                                                                         			  Unused Relocatable        main_GEN_0029:0129H
endif_4                                                                         			  Unused Relocatable        main_GEN_0029:0156H
endif_5                                                                         			         Relocatable         main_GEN_0029:01A7H
for_3                                                                           			         Relocatable         main_GEN_0029:0172H
for_5                                                                           			         Relocatable         main_GEN_0029:017EH
for_7                                                                           			         Relocatable         main_GEN_0029:01AEH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0029:020DH
for_end_1                                                                       			  Unused Relocatable        main_GEN_0029:0108H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0029:0102H
for_end_3                                                                       			         Relocatable         main_GEN_0029:01D9H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0029:01A2H
for_end_5                                                                       			         Relocatable         main_GEN_0029:019CH
for_end_6                                                                       			  Unused Relocatable        main_GEN_0029:01D2H
for_end_7                                                                       			         Relocatable         main_GEN_0029:01CCH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0029:0207H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0029:00FCH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0029:0102H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0029:0195H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0029:019CH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0029:01C5H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0029:01CCH
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0029:01D2H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0029:01EDH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0029:00F0H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0029:00B0H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0029:017BH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0029:01ABH
label_end_92                                                                    			         Relocatable         main_GEN_0029:020CH
label_end_93                                                                    			         Relocatable         main_GEN_0029:0101H
label_end_94                                                                    			         Relocatable         main_GEN_0029:0107H
label_end_95                                                                    			         Relocatable         main_GEN_0029:01A1H
label_end_96                                                                    			         Relocatable         main_GEN_0029:01D1H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0004H	 main_GEN_0006                           			 X_OVLY                                  
0004H	 main_GEN_0007                           			 X_OVLY                                  
0001H	 main_GEN_0008                           			 X_OVLY                                  
0001H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0080H	 main_GEN_0011                           			 Y_OVLY                                  
0001H	 main_GEN_0012                           			 X_OVLY                                  
0001H	 main_GEN_0013                           			 X_OVLY                                  
0001H	 main_GEN_0014                           			 X_OVLY                                  
0001H	 main_GEN_0015                           			 X_OVLY                                  
0001H	 main_GEN_0016                           			 X_OVLY                                  
0001H	 main_GEN_0017                           			 X_OVLY                                  
0001H	 main_GEN_0018                           			 X_OVLY                                  
0001H	 main_GEN_0019                           			 X_OVLY                                  
0002H	 main_GEN_0020                           			 X_OVLY                                  
0021H	 main_GEN_0021                           			 X_OVLY                                  
0021H	 main_GEN_0022                           			 X_OVLY                                  
0001H	 main_GEN_0023                           			 X_OVLY                                  
0001H	 main_GEN_0024                           			 X_OVLY                                  
0010H	 main_GEN_0025                           			 X_OVLY                                  
0010H	 main_GEN_0026                           			 X_OVLY                                  
0010H	 main_GEN_0027                           			 X_OVLY                                  
0010H	 main_GEN_0028                           			 X_OVLY                                  
0279H	 main_GEN_0029                           			 CODE_OVLY                               
